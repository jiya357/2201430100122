const mongoose = require("mongoose");

const shortUrlSchema = new mongoose.Schema({
  originalUrl: { type: String, required: true },
  shortCode: { type: String, required: true, unique: true },
  createdAt: { type: Date, default: Date.now },
  expiresAt: { type: Date, required: true }
});

module.exports = mongoose.model("ShortUrl", shortUrlSchema);

module.exports = function (req, res, next) {
  const log = `[${new Date().toISOString()}] ${req.method} ${req.url}`;
  console.log(log);
  next();
};

const express = require("express");
const router = express.Router();
const ShortUrl = require("../models/ShortUrl");

function generateShortCode(length = 6) {
  return Math.random().toString(36).substr(2, length);
}

router.post("/shorturls", async (req, res) => {
  try {
    const { url, validity = 30, shortcode } = req.body;
    if (!url || typeof url !== "string") return res.status(400).json({ error: "Invalid URL" });

    let shortCode = shortcode || generateShortCode();

    if (shortcode) {
      const exists = await ShortUrl.findOne({ shortCode });
      if (exists) return res.status(400).json({ error: "Shortcode already in use" });
    }

    const expiryDate = new Date(Date.now() + validity * 60000);

    const newUrl = new ShortUrl({
      originalUrl: url,
      shortCode,
      expiresAt: expiryDate
    });

    await newUrl.save();

    res.status(201).json({
      shortLink: `${req.protocol}://${req.get("host")}/${shortCode}`,
      expiry: expiryDate.toISOString()
    });
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

router.get("/:shortcode", async (req, res) => {
  try {
    const shortUrl = await ShortUrl.findOne({ shortCode: req.params.shortcode });

    if (!shortUrl) return res.status(404).json({ error: "Shortlink not found" });

    if (new Date() > shortUrl.expiresAt) return res.status(410).json({ error: "Link expired" });

    res.redirect(shortUrl.originalUrl);
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

module.exports = router;
require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const app = express();
const logger = require("./middleware/logger");
const shortenerRoutes = require("./routes/shortener");

app.use(express.json());
app.use(logger);
app.use("/", shortenerRoutes);

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    app.listen(process.env.PORT || 3000, () => console.log("Server started"));
  })
  .catch(err => console.error("MongoDB connection error:", err));
PORT=3000
MONGO_URI=mongodb://localhost:27017/urlshortener
